//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPCRUD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PlayerCRUDEntities : DbContext
    {
        public PlayerCRUDEntities()
            : base("name=PlayerCRUDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Player> Players { get; set; }
    
        public virtual ObjectResult<Player> AllPlayerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("AllPlayerList");
        }
    
        public virtual ObjectResult<Player> AllPlayerList(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("AllPlayerList", mergeOption);
        }
    
        public virtual ObjectResult<Player> DeletePlayer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("DeletePlayer", idParameter);
        }
    
        public virtual ObjectResult<Player> DeletePlayer(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("DeletePlayer", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Player> GetPlayerById(Nullable<int> playerId)
        {
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("GetPlayerById", playerIdParameter);
        }
    
        public virtual ObjectResult<Player> GetPlayerById(Nullable<int> playerId, MergeOption mergeOption)
        {
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("GetPlayerById", mergeOption, playerIdParameter);
        }
    
        public virtual ObjectResult<Player> InsertPlayer(string firstName, string lastName, string email)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("InsertPlayer", firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<Player> InsertPlayer(string firstName, string lastName, string email, MergeOption mergeOption)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("InsertPlayer", mergeOption, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<Player> UpdatePlayer(Nullable<int> playerId, string firstName, string lastName, string email)
        {
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("UpdatePlayer", playerIdParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<Player> UpdatePlayer(Nullable<int> playerId, string firstName, string lastName, string email, MergeOption mergeOption)
        {
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Player>("UpdatePlayer", mergeOption, playerIdParameter, firstNameParameter, lastNameParameter, emailParameter);
        }
    }
}
